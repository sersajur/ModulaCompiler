Lexical analyze:
1:1	module	"module"	
1:7	id	"Main"	
1:12	semicolom	";"	
1:13	var	"var"	
2:4	id	"g"	
2:6	comma	","	
2:7	id	"f"	
2:9	colom	":"	
2:10	integer	"integer"	
2:18	semicolom	";"	
2:19	id	"arrv"	
3:6	colom	":"	
3:7	array	"array"	
3:13	intval	"1"	1
3:15	colom	":"	
3:16	intval	"15"	15
3:18	comma	","	
3:19	intval	"1"	1
3:20	colom	":"	
3:21	intval	"20"	20
3:23	comma	","	
3:24	intval	"1"	1
3:25	colom	":"	
3:26	intval	"3"	3
3:27	comma	","	
3:28	intval	"1"	1
3:29	colom	":"	
3:30	intval	"5"	5
3:31	comma	","	
3:32	intval	"1"	1
3:33	colom	":"	
3:34	intval	"6"	6
3:35	of	"of"	
3:38	real	"real"	
3:43	semicolom	";"	
3:44	const	"const"	
4:6	id	"a"	
4:8	eq	"="	
4:10	sub	"-"	
4:12	intval	"6"	6
4:13	semicolom	";"	
4:14	var	"var"	
5:4	id	"jj"	
5:7	colom	":"	
5:8	Boolean	"Boolean"	
5:15	semicolom	";"	
5:16	procedure	"procedure"	
7:10	id	"MyProc"	
7:17	lbr	"("	
7:18	var	"var"	
7:21	id	"a"	
7:23	comma	","	
7:24	id	"b"	
7:26	colom	":"	
7:27	integer	"integer"	
7:34	semicolom	";"	
7:35	const	"const"	
7:41	id	"k"	
7:43	colom	":"	
7:44	Boolean	"Boolean"	
7:51	rbr	")"	
7:52	var	"var"	
8:4	id	"ag"	
8:7	colom	":"	
8:8	real	"real"	
8:12	semicolom	";"	
8:13	begin	"begin"	
9:6	id	"a"	
10:3	ass	":="	
10:5	realval	"5.0"	5
10:8	end	"end"	
11:4	id	"MyProc"	
11:11	semicolom	";"	
11:12	begin	"begin"	
12:5	for	"for"	
13:5	id	"g"	
13:7	eq	"="	
13:9	intval	"3"	3
13:11	colom	":"	
13:13	intval	"15"	15
13:16	id	"g"	
14:3	ass	":="	
14:5	id	"g"	
14:6	add	"+"	
14:7	id	"g"	
14:8	end	"end"	
15:4	semicolom	";"	
15:5	if	"if"	
17:3	lbr	"("	
17:5	lbr	"("	
17:6	intval	"5"	5
17:7	add	"+"	
17:8	intval	"7"	7
17:9	rbr	")"	
17:10	add	"+"	
17:11	lbr	"("	
17:12	id	"a"	
17:13	le	"<"	
17:15	intval	"7"	7
17:17	rbr	")"	
17:18	rbr	")"	
17:19	then	"then"	
17:24	id	"g"	
18:4	ass	":="	
18:6	id	"a"	
18:7	mul	"*"	
18:8	lbr	"("	
18:9	id	"a"	
18:10	add	"+"	
18:11	id	"a"	
18:12	rbr	")"	
18:13	div	"/"	
18:14	id	"a"	
18:15	le	"<"	
18:17	id	"a"	
18:19	semicolom	";"	
18:20	id	"f"	
19:4	ass	":="	
19:6	lbr	"("	
19:7	lbr	"("	
19:8	id	"a"	
19:9	add	"+"	
19:10	intval	"3"	3
19:11	rbr	")"	
19:12	sub	"-"	
19:13	intval	"1"	1
19:14	rbr	")"	
19:15	mul	"*"	
19:16	intval	"5"	5
19:17	elsif	"elsif"	
20:7	lbr	"("	
20:9	id	"a"	
20:10	le	"<"	
20:12	intval	"4"	4
20:14	rbr	")"	
20:15	then	"then"	
20:20	id	"f"	
21:4	ass	":="	
21:6	intval	"3"	3
21:7	elsif	"elsif"	
22:7	lbr	"("	
22:9	id	"a"	
22:10	le	"<"	
22:12	intval	"6"	6
22:14	rbr	")"	
22:15	then	"then"	
22:20	id	"f"	
23:4	ass	":="	
23:6	intval	"3"	3
23:7	else	"else"	
24:6	id	"g"	
25:4	ass	":="	
25:6	boolval	"false"	0
25:11	end	"end"	
26:5	semicolom	";"	
26:6	id	"MyProc"	
28:7	lbr	"("	
28:8	id	"arrv"	
28:12	lbrind	"["	
28:13	intval	"1"	1
28:14	comma	","	
28:15	intval	"2"	2
28:17	comma	","	
28:18	intval	"3"	3
28:20	comma	","	
28:21	intval	"4"	4
28:23	comma	","	
28:24	intval	"5"	5
28:26	rbrind	"]"	
28:27	comma	","	
28:28	id	"g"	
28:30	comma	","	
28:31	id	"f"	
28:33	rbr	")"	
28:34	end	"end"	
29:3	id	"Main"	
29:8	dot	"."	
29:9	eof		
Syntax analyze:
1: <program>::=<module> dot 
	2: <module>::=<moduleheading> <block> id 
		3: <moduleheading>::=module id semicolom 
		5: <block>::=<declarationparts> <fctdeclarationparts> 
			9: <declarationparts>::=<declarationpart> <fctdeclarationpart> 
				13: <declarationpart>::=var <fctvariabledeclarations> 
					17: <fctvariabledeclarations>::=<variabledeclarations> 
						22: <variabledeclarations>::=<variabledeclaration> semicolom <fctvariabledeclaration> 
							50: <variabledeclaration>::=<identlist> colom <type> 
								42: <identlist>::=id <fctidentlist> 
									44: <fctidentlist>::=comma <identlist> 
										42: <identlist>::=id <fctidentlist> 
											43: <fctidentlist>::=Lambda
								36: <type>::=<basetype> 
									39: <basetype>::=integer 
							23: <fctvariabledeclaration>::=<variabledeclarations> 
								22: <variabledeclarations>::=<variabledeclaration> semicolom <fctvariabledeclaration> 
									50: <variabledeclaration>::=<identlist> colom <type> 
										42: <identlist>::=id <fctidentlist> 
											43: <fctidentlist>::=Lambda
										37: <type>::=<arraystructure> 
											45: <arraystructure>::=array <indexrangelist> of <basetype> 
												46: <indexrangelist>::=<indexrange> <fctindexrange> 
													49: <indexrange>::=intval colom intval 
													47: <fctindexrange>::=comma <indexrangelist> 
														46: <indexrangelist>::=<indexrange> <fctindexrange> 
															49: <indexrange>::=intval colom intval 
															47: <fctindexrange>::=comma <indexrangelist> 
																46: <indexrangelist>::=<indexrange> <fctindexrange> 
																	49: <indexrange>::=intval colom intval 
																	47: <fctindexrange>::=comma <indexrangelist> 
																		46: <indexrangelist>::=<indexrange> <fctindexrange> 
																			49: <indexrange>::=intval colom intval 
																			47: <fctindexrange>::=comma <indexrangelist> 
																				46: <indexrangelist>::=<indexrange> <fctindexrange> 
																					49: <indexrange>::=intval colom intval 
																					48: <fctindexrange>::=Lambda
												40: <basetype>::=real 
									24: <fctvariabledeclaration>::=Lambda
				10: <fctdeclarationpart>::=<declarationparts> 
					9: <declarationparts>::=<declarationpart> <fctdeclarationpart> 
						12: <declarationpart>::=const <fctconstantdeclarations> 
							15: <fctconstantdeclarations>::=<constantdeclarations> 
								19: <constantdeclarations>::=<constantdeclaration> semicolom <fctconstantdeclaration> 
									26: <constantdeclaration>::=id eq <constant> 
										28: <constant>::=<sign> <number> 
											33: <sign>::=sub 
											34: <number>::=intval 
									21: <fctconstantdeclaration>::=Lambda
						10: <fctdeclarationpart>::=<declarationparts> 
							9: <declarationparts>::=<declarationpart> <fctdeclarationpart> 
								13: <declarationpart>::=var <fctvariabledeclarations> 
									17: <fctvariabledeclarations>::=<variabledeclarations> 
										22: <variabledeclarations>::=<variabledeclaration> semicolom <fctvariabledeclaration> 
											50: <variabledeclaration>::=<identlist> colom <type> 
												42: <identlist>::=id <fctidentlist> 
													43: <fctidentlist>::=Lambda
												36: <type>::=<basetype> 
													38: <basetype>::=Boolean 
											24: <fctvariabledeclaration>::=Lambda
								10: <fctdeclarationpart>::=<declarationparts> 
									9: <declarationparts>::=<declarationpart> <fctdeclarationpart> 
										14: <declarationpart>::=<proceduredeclaration> semicolom 
											51: <proceduredeclaration>::=procedure id <fctproceduredeclaration1> 
												53: <fctproceduredeclaration1>::=<mbformalparameters> <fctmbprocedurebody> 
													56: <mbformalparameters>::=lbr <mbsectionlist> rbr 
														57: <mbsectionlist>::=<formalparameters> 
															60: <formalparameters>::=<mbspec> <section> <fctsection> 
																66: <mbspec>::=var 
																63: <section>::=<identlist> colom <type> 
																	42: <identlist>::=id <fctidentlist> 
																		44: <fctidentlist>::=comma <identlist> 
																			42: <identlist>::=id <fctidentlist> 
																				43: <fctidentlist>::=Lambda
																	36: <type>::=<basetype> 
																		39: <basetype>::=integer 
																61: <fctsection>::=semicolom <formalparameters> 
																	60: <formalparameters>::=<mbspec> <section> <fctsection> 
																		65: <mbspec>::=const 
																		63: <section>::=<identlist> colom <type> 
																			42: <identlist>::=id <fctidentlist> 
																				43: <fctidentlist>::=Lambda
																			36: <type>::=<basetype> 
																				38: <basetype>::=Boolean 
																		62: <fctsection>::=Lambda
													54: <fctmbprocedurebody>::=<block> id 
														5: <block>::=<declarationparts> <fctdeclarationparts> 
															9: <declarationparts>::=<declarationpart> <fctdeclarationpart> 
																13: <declarationpart>::=var <fctvariabledeclarations> 
																	17: <fctvariabledeclarations>::=<variabledeclarations> 
																		22: <variabledeclarations>::=<variabledeclaration> semicolom <fctvariabledeclaration> 
																			50: <variabledeclaration>::=<identlist> colom <type> 
																				42: <identlist>::=id <fctidentlist> 
																					43: <fctidentlist>::=Lambda
																				36: <type>::=<basetype> 
																					40: <basetype>::=real 
																			24: <fctvariabledeclaration>::=Lambda
																11: <fctdeclarationpart>::=Lambda
															8: <fctdeclarationparts>::=<statementpart> end 
																25: <statementpart>::=begin <statementsequence> 
																	71: <statementsequence>::=<statement> <fctstatement> 
																		74: <statement>::=<assignment> 
																			78: <assignment>::=<variable> ass <expression> 
																				79: <variable>::=id <fctvar> 
																					81: <fctvar>::=Lambda
																				85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																					89: <SimpleExpression>::=<term> <fcttermadd> 
																						96: <term>::=<factor> <fcttermmul> 
																							100: <factor>::=<unsignedconstant> 
																								30: <unsignedconstant>::=<number> 
																									35: <number>::=realval 
																							98: <fcttermmul>::=Lambda
																						92: <fcttermadd>::=Lambda
																					87: <fctsimpleexpression>::=Lambda
																		73: <fctstatement>::=Lambda
										11: <fctdeclarationpart>::=Lambda
			8: <fctdeclarationparts>::=<statementpart> end 
				25: <statementpart>::=begin <statementsequence> 
					71: <statementsequence>::=<statement> <fctstatement> 
						77: <statement>::=<forstatement> 
							135: <forstatement>::=for <variable> eq <expression> colom <expression> <statementsequence> end 
								79: <variable>::=id <fctvar> 
									81: <fctvar>::=Lambda
								85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
									89: <SimpleExpression>::=<term> <fcttermadd> 
										96: <term>::=<factor> <fcttermmul> 
											100: <factor>::=<unsignedconstant> 
												30: <unsignedconstant>::=<number> 
													34: <number>::=intval 
											98: <fcttermmul>::=Lambda
										92: <fcttermadd>::=Lambda
									87: <fctsimpleexpression>::=Lambda
								85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
									89: <SimpleExpression>::=<term> <fcttermadd> 
										96: <term>::=<factor> <fcttermmul> 
											100: <factor>::=<unsignedconstant> 
												30: <unsignedconstant>::=<number> 
													34: <number>::=intval 
											98: <fcttermmul>::=Lambda
										92: <fcttermadd>::=Lambda
									87: <fctsimpleexpression>::=Lambda
								71: <statementsequence>::=<statement> <fctstatement> 
									74: <statement>::=<assignment> 
										78: <assignment>::=<variable> ass <expression> 
											79: <variable>::=id <fctvar> 
												81: <fctvar>::=Lambda
											85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
												89: <SimpleExpression>::=<term> <fcttermadd> 
													96: <term>::=<factor> <fcttermmul> 
														102: <factor>::=<variable> 
															79: <variable>::=id <fctvar> 
																81: <fctvar>::=Lambda
														98: <fcttermmul>::=Lambda
													91: <fcttermadd>::=<mbaddition> 
														95: <mbaddition>::=<addoperator> <term> <fcttermadd> 
															116: <addoperator>::=add 
															96: <term>::=<factor> <fcttermmul> 
																102: <factor>::=<variable> 
																	79: <variable>::=id <fctvar> 
																		81: <fctvar>::=Lambda
																98: <fcttermmul>::=Lambda
															92: <fcttermadd>::=Lambda
												87: <fctsimpleexpression>::=Lambda
									73: <fctstatement>::=Lambda
						72: <fctstatement>::=semicolom <statementsequence> 
							71: <statementsequence>::=<statement> <fctstatement> 
								76: <statement>::=<ifstatement> 
									125: <ifstatement>::=if <expression> then <statementsequence> <fctifstatement> 
										85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
											89: <SimpleExpression>::=<term> <fcttermadd> 
												96: <term>::=<factor> <fcttermmul> 
													103: <factor>::=lbr <expression> rbr 
														85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
															89: <SimpleExpression>::=<term> <fcttermadd> 
																96: <term>::=<factor> <fcttermmul> 
																	103: <factor>::=lbr <expression> rbr 
																		85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																			89: <SimpleExpression>::=<term> <fcttermadd> 
																				96: <term>::=<factor> <fcttermmul> 
																					100: <factor>::=<unsignedconstant> 
																						30: <unsignedconstant>::=<number> 
																							34: <number>::=intval 
																					98: <fcttermmul>::=Lambda
																				91: <fcttermadd>::=<mbaddition> 
																					95: <mbaddition>::=<addoperator> <term> <fcttermadd> 
																						116: <addoperator>::=add 
																						96: <term>::=<factor> <fcttermmul> 
																							100: <factor>::=<unsignedconstant> 
																								30: <unsignedconstant>::=<number> 
																									34: <number>::=intval 
																							98: <fcttermmul>::=Lambda
																						92: <fcttermadd>::=Lambda
																			87: <fctsimpleexpression>::=Lambda
																	98: <fcttermmul>::=Lambda
																91: <fcttermadd>::=<mbaddition> 
																	95: <mbaddition>::=<addoperator> <term> <fcttermadd> 
																		116: <addoperator>::=add 
																		96: <term>::=<factor> <fcttermmul> 
																			103: <factor>::=lbr <expression> rbr 
																				85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																					89: <SimpleExpression>::=<term> <fcttermadd> 
																						96: <term>::=<factor> <fcttermmul> 
																							102: <factor>::=<variable> 
																								79: <variable>::=id <fctvar> 
																									81: <fctvar>::=Lambda
																							98: <fcttermmul>::=Lambda
																						92: <fcttermadd>::=Lambda
																					86: <fctsimpleexpression>::=<mbrelation> 
																						88: <mbrelation>::=<relation> <SimpleExpression> 
																							120: <relation>::=le 
																							89: <SimpleExpression>::=<term> <fcttermadd> 
																								96: <term>::=<factor> <fcttermmul> 
																									100: <factor>::=<unsignedconstant> 
																										30: <unsignedconstant>::=<number> 
																											34: <number>::=intval 
																									98: <fcttermmul>::=Lambda
																								92: <fcttermadd>::=Lambda
																			98: <fcttermmul>::=Lambda
																		92: <fcttermadd>::=Lambda
															87: <fctsimpleexpression>::=Lambda
													98: <fcttermmul>::=Lambda
												92: <fcttermadd>::=Lambda
											87: <fctsimpleexpression>::=Lambda
										71: <statementsequence>::=<statement> <fctstatement> 
											74: <statement>::=<assignment> 
												78: <assignment>::=<variable> ass <expression> 
													79: <variable>::=id <fctvar> 
														81: <fctvar>::=Lambda
													85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
														89: <SimpleExpression>::=<term> <fcttermadd> 
															96: <term>::=<factor> <fcttermmul> 
																102: <factor>::=<variable> 
																	79: <variable>::=id <fctvar> 
																		81: <fctvar>::=Lambda
																97: <fcttermmul>::=<mbmultiplication> 
																	99: <mbmultiplication>::=<muloperator> <factor> <fcttermmul> 
																		113: <muloperator>::=mul 
																		103: <factor>::=lbr <expression> rbr 
																			85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																				89: <SimpleExpression>::=<term> <fcttermadd> 
																					96: <term>::=<factor> <fcttermmul> 
																						102: <factor>::=<variable> 
																							79: <variable>::=id <fctvar> 
																								81: <fctvar>::=Lambda
																						98: <fcttermmul>::=Lambda
																					91: <fcttermadd>::=<mbaddition> 
																						95: <mbaddition>::=<addoperator> <term> <fcttermadd> 
																							116: <addoperator>::=add 
																							96: <term>::=<factor> <fcttermmul> 
																								102: <factor>::=<variable> 
																									79: <variable>::=id <fctvar> 
																										81: <fctvar>::=Lambda
																								98: <fcttermmul>::=Lambda
																							92: <fcttermadd>::=Lambda
																				87: <fctsimpleexpression>::=Lambda
																		97: <fcttermmul>::=<mbmultiplication> 
																			99: <mbmultiplication>::=<muloperator> <factor> <fcttermmul> 
																				114: <muloperator>::=div 
																				102: <factor>::=<variable> 
																					79: <variable>::=id <fctvar> 
																						81: <fctvar>::=Lambda
																				98: <fcttermmul>::=Lambda
															92: <fcttermadd>::=Lambda
														86: <fctsimpleexpression>::=<mbrelation> 
															88: <mbrelation>::=<relation> <SimpleExpression> 
																120: <relation>::=le 
																89: <SimpleExpression>::=<term> <fcttermadd> 
																	96: <term>::=<factor> <fcttermmul> 
																		102: <factor>::=<variable> 
																			79: <variable>::=id <fctvar> 
																				81: <fctvar>::=Lambda
																		98: <fcttermmul>::=Lambda
																	92: <fcttermadd>::=Lambda
											72: <fctstatement>::=semicolom <statementsequence> 
												71: <statementsequence>::=<statement> <fctstatement> 
													74: <statement>::=<assignment> 
														78: <assignment>::=<variable> ass <expression> 
															79: <variable>::=id <fctvar> 
																81: <fctvar>::=Lambda
															85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																89: <SimpleExpression>::=<term> <fcttermadd> 
																	96: <term>::=<factor> <fcttermmul> 
																		103: <factor>::=lbr <expression> rbr 
																			85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																				89: <SimpleExpression>::=<term> <fcttermadd> 
																					96: <term>::=<factor> <fcttermmul> 
																						103: <factor>::=lbr <expression> rbr 
																							85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																								89: <SimpleExpression>::=<term> <fcttermadd> 
																									96: <term>::=<factor> <fcttermmul> 
																										102: <factor>::=<variable> 
																											79: <variable>::=id <fctvar> 
																												81: <fctvar>::=Lambda
																										98: <fcttermmul>::=Lambda
																									91: <fcttermadd>::=<mbaddition> 
																										95: <mbaddition>::=<addoperator> <term> <fcttermadd> 
																											116: <addoperator>::=add 
																											96: <term>::=<factor> <fcttermmul> 
																												100: <factor>::=<unsignedconstant> 
																													30: <unsignedconstant>::=<number> 
																														34: <number>::=intval 
																												98: <fcttermmul>::=Lambda
																											92: <fcttermadd>::=Lambda
																								87: <fctsimpleexpression>::=Lambda
																						98: <fcttermmul>::=Lambda
																					91: <fcttermadd>::=<mbaddition> 
																						95: <mbaddition>::=<addoperator> <term> <fcttermadd> 
																							117: <addoperator>::=sub 
																							96: <term>::=<factor> <fcttermmul> 
																								100: <factor>::=<unsignedconstant> 
																									30: <unsignedconstant>::=<number> 
																										34: <number>::=intval 
																								98: <fcttermmul>::=Lambda
																							92: <fcttermadd>::=Lambda
																				87: <fctsimpleexpression>::=Lambda
																		97: <fcttermmul>::=<mbmultiplication> 
																			99: <mbmultiplication>::=<muloperator> <factor> <fcttermmul> 
																				113: <muloperator>::=mul 
																				100: <factor>::=<unsignedconstant> 
																					30: <unsignedconstant>::=<number> 
																						34: <number>::=intval 
																				98: <fcttermmul>::=Lambda
																	92: <fcttermadd>::=Lambda
																87: <fctsimpleexpression>::=Lambda
													73: <fctstatement>::=Lambda
										127: <fctifstatement>::=<mbelsifs> <fctmbelsifs> 
											131: <mbelsifs>::=elsif <expression> then <statementsequence> <fctmbelsifs1> 
												85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
													89: <SimpleExpression>::=<term> <fcttermadd> 
														96: <term>::=<factor> <fcttermmul> 
															103: <factor>::=lbr <expression> rbr 
																85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																	89: <SimpleExpression>::=<term> <fcttermadd> 
																		96: <term>::=<factor> <fcttermmul> 
																			102: <factor>::=<variable> 
																				79: <variable>::=id <fctvar> 
																					81: <fctvar>::=Lambda
																			98: <fcttermmul>::=Lambda
																		92: <fcttermadd>::=Lambda
																	86: <fctsimpleexpression>::=<mbrelation> 
																		88: <mbrelation>::=<relation> <SimpleExpression> 
																			120: <relation>::=le 
																			89: <SimpleExpression>::=<term> <fcttermadd> 
																				96: <term>::=<factor> <fcttermmul> 
																					100: <factor>::=<unsignedconstant> 
																						30: <unsignedconstant>::=<number> 
																							34: <number>::=intval 
																					98: <fcttermmul>::=Lambda
																				92: <fcttermadd>::=Lambda
															98: <fcttermmul>::=Lambda
														92: <fcttermadd>::=Lambda
													87: <fctsimpleexpression>::=Lambda
												71: <statementsequence>::=<statement> <fctstatement> 
													74: <statement>::=<assignment> 
														78: <assignment>::=<variable> ass <expression> 
															79: <variable>::=id <fctvar> 
																81: <fctvar>::=Lambda
															85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																89: <SimpleExpression>::=<term> <fcttermadd> 
																	96: <term>::=<factor> <fcttermmul> 
																		100: <factor>::=<unsignedconstant> 
																			30: <unsignedconstant>::=<number> 
																				34: <number>::=intval 
																		98: <fcttermmul>::=Lambda
																	92: <fcttermadd>::=Lambda
																87: <fctsimpleexpression>::=Lambda
													73: <fctstatement>::=Lambda
												132: <fctmbelsifs1>::=<mbelsifs> 
													131: <mbelsifs>::=elsif <expression> then <statementsequence> <fctmbelsifs1> 
														85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
															89: <SimpleExpression>::=<term> <fcttermadd> 
																96: <term>::=<factor> <fcttermmul> 
																	103: <factor>::=lbr <expression> rbr 
																		85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																			89: <SimpleExpression>::=<term> <fcttermadd> 
																				96: <term>::=<factor> <fcttermmul> 
																					102: <factor>::=<variable> 
																						79: <variable>::=id <fctvar> 
																							81: <fctvar>::=Lambda
																					98: <fcttermmul>::=Lambda
																				92: <fcttermadd>::=Lambda
																			86: <fctsimpleexpression>::=<mbrelation> 
																				88: <mbrelation>::=<relation> <SimpleExpression> 
																					120: <relation>::=le 
																					89: <SimpleExpression>::=<term> <fcttermadd> 
																						96: <term>::=<factor> <fcttermmul> 
																							100: <factor>::=<unsignedconstant> 
																								30: <unsignedconstant>::=<number> 
																									34: <number>::=intval 
																							98: <fcttermmul>::=Lambda
																						92: <fcttermadd>::=Lambda
																	98: <fcttermmul>::=Lambda
																92: <fcttermadd>::=Lambda
															87: <fctsimpleexpression>::=Lambda
														71: <statementsequence>::=<statement> <fctstatement> 
															74: <statement>::=<assignment> 
																78: <assignment>::=<variable> ass <expression> 
																	79: <variable>::=id <fctvar> 
																		81: <fctvar>::=Lambda
																	85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																		89: <SimpleExpression>::=<term> <fcttermadd> 
																			96: <term>::=<factor> <fcttermmul> 
																				100: <factor>::=<unsignedconstant> 
																					30: <unsignedconstant>::=<number> 
																						34: <number>::=intval 
																				98: <fcttermmul>::=Lambda
																			92: <fcttermadd>::=Lambda
																		87: <fctsimpleexpression>::=Lambda
															73: <fctstatement>::=Lambda
														133: <fctmbelsifs1>::=Lambda
											130: <fctmbelsifs>::=<mbelse> end 
												134: <mbelse>::=else <statementsequence> 
													71: <statementsequence>::=<statement> <fctstatement> 
														74: <statement>::=<assignment> 
															78: <assignment>::=<variable> ass <expression> 
																79: <variable>::=id <fctvar> 
																	81: <fctvar>::=Lambda
																85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																	89: <SimpleExpression>::=<term> <fcttermadd> 
																		96: <term>::=<factor> <fcttermmul> 
																			100: <factor>::=<unsignedconstant> 
																				29: <unsignedconstant>::=boolval 
																			98: <fcttermmul>::=Lambda
																		92: <fcttermadd>::=Lambda
																	87: <fctsimpleexpression>::=Lambda
														73: <fctstatement>::=Lambda
								72: <fctstatement>::=semicolom <statementsequence> 
									71: <statementsequence>::=<statement> <fctstatement> 
										75: <statement>::=<procedurecall> 
											122: <procedurecall>::=id <mbparameterlist> 
												123: <mbparameterlist>::=<parameterlist> 
													105: <parameterlist>::=lbr <fctparameters> rbr 
														106: <fctparameters>::=<parameters> 
															108: <parameters>::=<parameter> <fctparameter> 
																111: <parameter>::=<expression> 
																	85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																		89: <SimpleExpression>::=<term> <fcttermadd> 
																			96: <term>::=<factor> <fcttermmul> 
																				102: <factor>::=<variable> 
																					79: <variable>::=id <fctvar> 
																						80: <fctvar>::=lbrind <indices> rbrind <fctvar> 
																							82: <indices>::=<expression> <fctexpr> 
																								85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																									89: <SimpleExpression>::=<term> <fcttermadd> 
																										96: <term>::=<factor> <fcttermmul> 
																											100: <factor>::=<unsignedconstant> 
																												30: <unsignedconstant>::=<number> 
																													34: <number>::=intval 
																											98: <fcttermmul>::=Lambda
																										92: <fcttermadd>::=Lambda
																									87: <fctsimpleexpression>::=Lambda
																								83: <fctexpr>::=comma <indices> 
																									82: <indices>::=<expression> <fctexpr> 
																										85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																											89: <SimpleExpression>::=<term> <fcttermadd> 
																												96: <term>::=<factor> <fcttermmul> 
																													100: <factor>::=<unsignedconstant> 
																														30: <unsignedconstant>::=<number> 
																															34: <number>::=intval 
																													98: <fcttermmul>::=Lambda
																												92: <fcttermadd>::=Lambda
																											87: <fctsimpleexpression>::=Lambda
																										83: <fctexpr>::=comma <indices> 
																											82: <indices>::=<expression> <fctexpr> 
																												85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																													89: <SimpleExpression>::=<term> <fcttermadd> 
																														96: <term>::=<factor> <fcttermmul> 
																															100: <factor>::=<unsignedconstant> 
																																30: <unsignedconstant>::=<number> 
																																	34: <number>::=intval 
																															98: <fcttermmul>::=Lambda
																														92: <fcttermadd>::=Lambda
																													87: <fctsimpleexpression>::=Lambda
																												83: <fctexpr>::=comma <indices> 
																													82: <indices>::=<expression> <fctexpr> 
																														85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																															89: <SimpleExpression>::=<term> <fcttermadd> 
																																96: <term>::=<factor> <fcttermmul> 
																																	100: <factor>::=<unsignedconstant> 
																																		30: <unsignedconstant>::=<number> 
																																			34: <number>::=intval 
																																	98: <fcttermmul>::=Lambda
																																92: <fcttermadd>::=Lambda
																															87: <fctsimpleexpression>::=Lambda
																														83: <fctexpr>::=comma <indices> 
																															82: <indices>::=<expression> <fctexpr> 
																																85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																																	89: <SimpleExpression>::=<term> <fcttermadd> 
																																		96: <term>::=<factor> <fcttermmul> 
																																			100: <factor>::=<unsignedconstant> 
																																				30: <unsignedconstant>::=<number> 
																																					34: <number>::=intval 
																																			98: <fcttermmul>::=Lambda
																																		92: <fcttermadd>::=Lambda
																																	87: <fctsimpleexpression>::=Lambda
																																84: <fctexpr>::=Lambda
																							81: <fctvar>::=Lambda
																				98: <fcttermmul>::=Lambda
																			92: <fcttermadd>::=Lambda
																		87: <fctsimpleexpression>::=Lambda
																109: <fctparameter>::=comma <parameters> 
																	108: <parameters>::=<parameter> <fctparameter> 
																		111: <parameter>::=<expression> 
																			85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																				89: <SimpleExpression>::=<term> <fcttermadd> 
																					96: <term>::=<factor> <fcttermmul> 
																						102: <factor>::=<variable> 
																							79: <variable>::=id <fctvar> 
																								81: <fctvar>::=Lambda
																						98: <fcttermmul>::=Lambda
																					92: <fcttermadd>::=Lambda
																				87: <fctsimpleexpression>::=Lambda
																		109: <fctparameter>::=comma <parameters> 
																			108: <parameters>::=<parameter> <fctparameter> 
																				111: <parameter>::=<expression> 
																					85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																						89: <SimpleExpression>::=<term> <fcttermadd> 
																							96: <term>::=<factor> <fcttermmul> 
																								102: <factor>::=<variable> 
																									79: <variable>::=id <fctvar> 
																										81: <fctvar>::=Lambda
																								98: <fcttermmul>::=Lambda
																							92: <fcttermadd>::=Lambda
																						87: <fctsimpleexpression>::=Lambda
																				110: <fctparameter>::=Lambda
										73: <fctstatement>::=Lambda
Semantic analyze:
 Block	IdName	Attributes
      	  Main	Module
  Main	MyProc	Procedure	( a, b, k ): Void
  Main	     a	Constant	-6: Integer
  Main	  arrv	Array	( 1:15, 1:20, 1:3, 1:5, 1:6 ): Real
  Main	     f	Variable	: Integer
  Main	     g	Variable	: Integer
  Main	    jj	Variable	: Boolean
MyProc	     a	Variable	: Integer
MyProc	    ag	Variable	: Real
MyProc	     b	Variable	: Integer
MyProc	     k	Variable	: Boolean
Code generation:
(1) LABEL _MODULE_Main
(2) - 0 6
(3) LABEL _PROCEDURE_MyProc
(4) POP
(5) = a (4)
(6) POP
(7) = b (6)
(8) POP
(9) = k (8)
(10) = a 5.0
(11) RET
(12) LABEL _MODULESTART
(13) = g 3
(14) LABEL _label0
(15) < g 15
(16) IFFALSE (15) _label1
(17) + g g
(18) = g (17)
(19) GOTO _label0
(20) LABEL _label1
(21) + 5 7
(22) < a 7
(23) + (21) (22)
(24) IFFALSE (23) _label2
(25) + a a
(26) * a (25)
(27) < (26) a
(28) = g (27)
(29) + a 3
(30) - (29) 1
(31) * (30) 5
(32) = f (31)
(33) GOTO _label2
(34) < a 4
(35) IFFALSE (34) _label3
(36) = f 3
(37) GOTO _label2
(38) LABEL _label3
(39) < a 6
(40) IFFALSE (39) _label4
(41) = f 3
(42) GOTO _label2
(43) LABEL _label4
(44) = g false
(45) LABEL _label2
(46) BOUNDS arrv 0
(47) BOUNDS arrv 1
(48) * 2 (47)
(49) + 1 (48)
(50) BOUNDS arrv 2
(51) * 3 (50)
(52) + (49) (51)
(53) BOUNDS arrv 3
(54) * 4 (53)
(55) + (52) (54)
(56) BOUNDS arrv 4
(57) * 5 (56)
(58) + (55) (57)
(59) ADDR arrv (58)
(60) PUSH (59)
(61) PUSH g
(62) PUSH f
(63) CALL _PROCEDURE_MyProc

