Lexical analyze:
1:1	module	"module"	
1:7	id	"Main"	
1:12	semicolom	";"	
1:13	var	"var"	
2:4	id	"a"	
3:3	comma	","	
3:4	id	"b"	
3:6	colom	":"	
3:7	real	"real"	
3:12	semicolom	";"	
3:13	id	"arrv"	
4:6	comma	","	
4:7	id	"as"	
4:10	colom	":"	
4:11	array	"array"	
4:17	intval	"1"	1
4:19	colom	":"	
4:20	intval	"15"	15
4:22	comma	","	
4:23	intval	"1"	1
4:24	colom	":"	
4:25	intval	"20"	20
4:27	comma	","	
4:28	intval	"1"	1
4:29	colom	":"	
4:30	intval	"4"	4
4:31	of	"of"	
4:34	real	"real"	
4:39	semicolom	";"	
4:40	const	"const"	
5:6	id	"str"	
6:5	eq	"="	
6:7	intval	"56"	56
6:10	semicolom	";"	
6:11	procedure	"procedure"	
8:10	id	"lol"	
8:14	lbr	"("	
8:15	id	"a"	
8:16	colom	":"	
8:17	integer	"integer"	
8:24	rbr	")"	
8:25	var	"var"	
9:5	id	"f"	
9:7	colom	":"	
9:8	integer	"integer"	
9:15	semicolom	";"	
9:16	begin	"begin"	
10:7	id	"aaa_lol"	
11:10	ass	":="	
11:13	intval	"3"	3
11:15	end	"end"	
12:5	id	"lol"	
12:9	semicolom	";"	
12:10	begin	"begin"	
13:5	id	"a"	
14:3	ass	":="	
14:5	id	"lol"	
14:8	lbr	"("	
14:9	intval	"3"	3
14:10	comma	","	
14:11	intval	"5"	5
14:13	rbr	")"	
14:14	semicolom	";"	
14:15	id	"b"	
15:3	ass	":="	
15:5	intval	"12B"	10
15:8	end	"end"	
16:3	id	"Main"	
16:8	dot	"."	
16:9	eof		
Syntax analyze:
1: <program>::=<module> dot 
	2: <module>::=<moduleheading> <block> id 
		3: <moduleheading>::=module id semicolom 
		5: <block>::=<declarationparts> <fctdeclarationparts> 
			9: <declarationparts>::=<declarationpart> <fctdeclarationpart> 
				13: <declarationpart>::=var <fctvariabledeclarations> 
					17: <fctvariabledeclarations>::=<variabledeclarations> 
						22: <variabledeclarations>::=<variabledeclaration> semicolom <fctvariabledeclaration> 
							50: <variabledeclaration>::=<identlist> colom <type> 
								42: <identlist>::=id <fctidentlist> 
									44: <fctidentlist>::=comma <identlist> 
										42: <identlist>::=id <fctidentlist> 
											43: <fctidentlist>::=Lambda
								36: <type>::=<basetype> 
									40: <basetype>::=real 
							23: <fctvariabledeclaration>::=<variabledeclarations> 
								22: <variabledeclarations>::=<variabledeclaration> semicolom <fctvariabledeclaration> 
									50: <variabledeclaration>::=<identlist> colom <type> 
										42: <identlist>::=id <fctidentlist> 
											44: <fctidentlist>::=comma <identlist> 
												42: <identlist>::=id <fctidentlist> 
													43: <fctidentlist>::=Lambda
										37: <type>::=<arraystructure> 
											45: <arraystructure>::=array <indexrangelist> of <basetype> 
												46: <indexrangelist>::=<indexrange> <fctindexrange> 
													49: <indexrange>::=intval colom intval 
													47: <fctindexrange>::=comma <indexrangelist> 
														46: <indexrangelist>::=<indexrange> <fctindexrange> 
															49: <indexrange>::=intval colom intval 
															47: <fctindexrange>::=comma <indexrangelist> 
																46: <indexrangelist>::=<indexrange> <fctindexrange> 
																	49: <indexrange>::=intval colom intval 
																	48: <fctindexrange>::=Lambda
												40: <basetype>::=real 
									24: <fctvariabledeclaration>::=Lambda
				10: <fctdeclarationpart>::=<declarationparts> 
					9: <declarationparts>::=<declarationpart> <fctdeclarationpart> 
						12: <declarationpart>::=const <fctconstantdeclarations> 
							15: <fctconstantdeclarations>::=<constantdeclarations> 
								19: <constantdeclarations>::=<constantdeclaration> semicolom <fctconstantdeclaration> 
									26: <constantdeclaration>::=id eq <constant> 
										27: <constant>::=<unsignedconstant> 
											30: <unsignedconstant>::=<number> 
												34: <number>::=intval 
									21: <fctconstantdeclaration>::=Lambda
						10: <fctdeclarationpart>::=<declarationparts> 
							9: <declarationparts>::=<declarationpart> <fctdeclarationpart> 
								14: <declarationpart>::=<proceduredeclaration> semicolom 
									51: <proceduredeclaration>::=procedure id <fctproceduredeclaration1> 
										53: <fctproceduredeclaration1>::=<mbformalparameters> <fctmbprocedurebody> 
											56: <mbformalparameters>::=lbr <mbsectionlist> rbr 
												57: <mbsectionlist>::=<formalparameters> 
													60: <formalparameters>::=<mbspec> <section> <fctsection> 
														64: <mbspec>::=Lambda
														63: <section>::=<identlist> colom <type> 
															42: <identlist>::=id <fctidentlist> 
																43: <fctidentlist>::=Lambda
															36: <type>::=<basetype> 
																39: <basetype>::=integer 
														62: <fctsection>::=Lambda
											54: <fctmbprocedurebody>::=<block> id 
												5: <block>::=<declarationparts> <fctdeclarationparts> 
													9: <declarationparts>::=<declarationpart> <fctdeclarationpart> 
														13: <declarationpart>::=var <fctvariabledeclarations> 
															17: <fctvariabledeclarations>::=<variabledeclarations> 
																22: <variabledeclarations>::=<variabledeclaration> semicolom <fctvariabledeclaration> 
																	50: <variabledeclaration>::=<identlist> colom <type> 
																		42: <identlist>::=id <fctidentlist> 
																			43: <fctidentlist>::=Lambda
																		36: <type>::=<basetype> 
																			39: <basetype>::=integer 
																	24: <fctvariabledeclaration>::=Lambda
														11: <fctdeclarationpart>::=Lambda
													8: <fctdeclarationparts>::=<statementpart> end 
														25: <statementpart>::=begin <statementsequence> 
															71: <statementsequence>::=<statement> <fctstatement> 
																74: <statement>::=<assignment> 
																	78: <assignment>::=<variable> ass <expression> 
																		79: <variable>::=id <fctvar> 
																			81: <fctvar>::=Lambda
																		85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																			89: <SimpleExpression>::=<term> <fcttermadd> 
																				96: <term>::=<factor> <fcttermmul> 
																					100: <factor>::=<unsignedconstant> 
																						30: <unsignedconstant>::=<number> 
																							34: <number>::=intval 
																					98: <fcttermmul>::=Lambda
																				92: <fcttermadd>::=Lambda
																			87: <fctsimpleexpression>::=Lambda
																73: <fctstatement>::=Lambda
								11: <fctdeclarationpart>::=Lambda
			8: <fctdeclarationparts>::=<statementpart> end 
				25: <statementpart>::=begin <statementsequence> 
					71: <statementsequence>::=<statement> <fctstatement> 
						74: <statement>::=<assignment> 
							78: <assignment>::=<variable> ass <expression> 
								79: <variable>::=id <fctvar> 
									81: <fctvar>::=Lambda
								85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
									89: <SimpleExpression>::=<term> <fcttermadd> 
										96: <term>::=<factor> <fcttermmul> 
											101: <factor>::=<functioncall> 
												104: <functioncall>::=id <parameterlist> 
													105: <parameterlist>::=lbr <fctparameters> rbr 
														106: <fctparameters>::=<parameters> 
															108: <parameters>::=<parameter> <fctparameter> 
																111: <parameter>::=<expression> 
																	85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																		89: <SimpleExpression>::=<term> <fcttermadd> 
																			96: <term>::=<factor> <fcttermmul> 
																				100: <factor>::=<unsignedconstant> 
																					30: <unsignedconstant>::=<number> 
																						34: <number>::=intval 
																				98: <fcttermmul>::=Lambda
																			92: <fcttermadd>::=Lambda
																		87: <fctsimpleexpression>::=Lambda
																109: <fctparameter>::=comma <parameters> 
																	108: <parameters>::=<parameter> <fctparameter> 
																		111: <parameter>::=<expression> 
																			85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
																				89: <SimpleExpression>::=<term> <fcttermadd> 
																					96: <term>::=<factor> <fcttermmul> 
																						100: <factor>::=<unsignedconstant> 
																							30: <unsignedconstant>::=<number> 
																								34: <number>::=intval 
																						98: <fcttermmul>::=Lambda
																					92: <fcttermadd>::=Lambda
																				87: <fctsimpleexpression>::=Lambda
																		110: <fctparameter>::=Lambda
											98: <fcttermmul>::=Lambda
										92: <fcttermadd>::=Lambda
									87: <fctsimpleexpression>::=Lambda
						72: <fctstatement>::=semicolom <statementsequence> 
							71: <statementsequence>::=<statement> <fctstatement> 
								74: <statement>::=<assignment> 
									78: <assignment>::=<variable> ass <expression> 
										79: <variable>::=id <fctvar> 
											81: <fctvar>::=Lambda
										85: <expression>::=<SimpleExpression> <fctsimpleexpression> 
											89: <SimpleExpression>::=<term> <fcttermadd> 
												96: <term>::=<factor> <fcttermmul> 
													100: <factor>::=<unsignedconstant> 
														30: <unsignedconstant>::=<number> 
															34: <number>::=intval 
													98: <fcttermmul>::=Lambda
												92: <fcttermadd>::=Lambda
											87: <fctsimpleexpression>::=Lambda
								73: <fctstatement>::=Lambda
Semantic analyze:
Block	IdName	Attributes
     	  Main	Module
 Main	     a	Variable	: Real
 Main	  arrv	Array	( 1:15, 1:20, 1:4 ): Real
 Main	    as	Array	( 1:15, 1:20, 1:4 ): Real
 Main	     b	Variable	: Real
 Main	   lol	Procedure	( a ): Void
 Main	   str	Constant	56: Integer
  lol	     a	Variable	: Integer
  lol	     f	Variable	: Integer
Code generation:
(1) LABEL _MODULE_Main
(2) LABEL _PROCEDURE_lol
(3) = aaa_lol 3
(4) RET
(5) LABEL _MODULESTART
(6) PUSH 3
(7) PUSH 5
(8) CALL _PROCEDURE_lol
(9) POP
(10) = a (9)
(11) = b 12B

